name: Deploy stack

on:
  workflow_dispatch:
  pull_request:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-west-1'

jobs:
  deploy-backend:
    name: Deploy backend
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Checkout
        uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Write default params.json file
        shell: bash
        working-directory: backend/stack
        run: |
          echo "${{ secrets.PARAMS_JSON_ENCODED }}" >> params.encoded
          base64 -d -i params.encoded >> params.json
          cat params.json
      - name: Transform configs
        shell: bash
        working-directory: scripts/transform-json
        env:
          SITE_ALIAS: ${{ steps.extract_branch.outputs.branch }}
          BUNGIE_API_KEY: ${{ secrets.BUNGIE_API_KEY }}
          CERT_ARN: ${{ secrets.CERT_ARN }}
          DISCORD_FEEDBACK_WEBHOOK: ${{ secrets.DISCORD_FEEDBACK_WEBHOOK }}
          OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
          STRIPE_ERROR_CB: ${{ secrets.STRIPE_ERROR_CB }}
          STRIPE_KEY: ${{ secrets.STRIPE_KEY }}
          STRIPE_SUCCESS_CB: ${{ secrets.STRIPE_SUCCESS_CB }}
          STRIPE_WEBHOOK_KEY: ${{ secrets.STRIPE_WEBHOOK_KEY }}
        run: |
          go run main.go \
            --mapfile ../../backend/stack/transform_map.json \
            --configfile ../../backend/stack/params.json
          cat ../../backend/stack/params.json
      - name: Build & deploy
        shell: bash
        working-directory: backend/stack
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 0
          SITE_ALIAS: ${{ steps.extract_branch.outputs.branch }}
        run: make deploy-branch
  deploy-app:
    name: Deploy app
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build shared library
        shell: bash
        working-directory: frontend/shared
        run: |
          npm ci
          npm run build
      - name: Transform configs
        shell: bash
        working-directory: scripts/transform-json
        env:
          API_BASE: https://${{ steps.extract_branch.outputs.branch }}-api.guardianforge-r53.net
          LOGIN_URL: ${{ secrets.LOGIN_URL }}
          OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          BUNGIE_API_KEY: ${{ secrets.BUNGIE_API_KEY }}
        run: |
          go run main.go \
            --mapfile ../../frontend/public/transform_map.json \
            --configfile ../../frontend/public/public/config.json
      - name: NPM install/build
        shell: bash
        working-directory: frontend/public
        run: |
          npm ci
          CI= npm run build
      - name: Clean deploy directory
        run: |
          aws s3 rm --recursive s3://guardianforge-${{ steps.extract_branch.outputs.branch }}-site/app/
      - name: Copy to S3
        working-directory: frontend/public
        run: |
          aws s3 sync build s3://guardianforge-${{ steps.extract_branch.outputs.branch }}-site/app --no-progress --acl public-read
      - name: Invalidate cache
        run: |
          CFDISTID=$(aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,comment:Comment}[?comment=='GuardianForge-${{ steps.extract_branch.outputs.branch }}'].id" --output text)
          echo "Invalidating $CFDISTID"
          aws cloudfront create-invalidation --distribution-id $CFDISTID --paths "/*"


